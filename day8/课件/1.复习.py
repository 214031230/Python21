# 自动化开发    50%  偏运维的
# web全栈开发   30%  和运维关系不大
# 爬虫          10-20%

# 写脚本

# 项目

# 面向对象
# 模块的拾遗，异常处理，网络编程 —— ftp
    # 不写了
    # 放弃了
# 并发编程

# 前端
# django基础
# 3-4周
# flask
# tornado

# 基础数据类型
    # int float      加减乘除 乘方取余 小数的保留几位小数 round
    # 可以存放任意的数据类型，增删改查
        # str  list tuple  序列  —— index
            # 字符串 split strip startswith join
        # dict set    散列
# for循环 while循环 条件语句
    # while循环  你不知道要循环多少次
    # for循环    你知道要循环多少次
    # 条件判断   一条if语句只有一个分支被执行
# 文件操作：open/close
    # 打开模式
        # a w r     ——直接对字符串操作
        # ab wb rb  ——直接对字节操作
    # 操作系统的编码和python编码不一致的乱码问题
# 函数
    # 函数基础 ：
        # 定义：关键字、参数：位置参数，*args，默认参数(关键字参数)=默认值，**kwargs、返回值
        # 调用：关键字：函数名(),参数：按照位置传，按照关键字传，接收返回值
    # 函数的命名空间：
        # 在函数的内部可以使用外部的变量：读，写改：声明 global改全局，nonlocal是改局部
        # 在外部不能使用函数内部的变量
    # 闭包 —— 装饰器
        # 是在函数的前后添加功能
    # 生成器函数 —— 迭代器 —— 生成器表达式 —— 列表推导式
        # yield写代码的时候可以尽量用，很好的节省内存
        # 生成器表达式和列表推导时能够很好的简化代码
        # 迭代器 生成器函数（调用不执行）—— 面试之前看
    # 递归函数
        # 大部分的递归都可以用循环实现
        # 递归相比循环来说 并不能节省内存 还占用更多的空间
        # 算法用到的特别多
# 模块
    # 内置模块
        # collections  namedtuple 有序字典 /默认字典
        # os   文件和文件夹的操作/和路径相关的/执行操作系统命令
        # sys  sys.path  sys.argv
        # time   三种时间格式 ：字符串(格式化) 元祖(结构化) 浮点(时间戳)
        # random 随机整数 小数 抽取 打乱顺序
        # re     正则 ： findall search
        # 序列化 pickle json shelve
        # hashlib 摘要算法的模块 文件的一致性校验 加密认证
        # logging 加日志的模块
        # configpaser --
    # 扩展模块
    # 自定义的模块
        # 模块和包
# 面向对象
    # 基础的定义
        # 类 对象 实例化
        # class 定义 语法
        # 三大特性 ： 继承**** 封装*** 多态*
            # 继承 继承的规则 子类可以使用中的所有非私有的名字，前提是子类没有
                #  多继承的查找顺序问题： 经典类深度优先 新式类 广度优先
                #  super不是单纯的寻找父类，而是遵循mro(广度优先)顺序
            # 封装
                # 私有的属性既不能被继承 也不能从类的外部调用
            # 多态 python自带
        # 组合 一个类的对象作为另外一个类对象的属性
        # 反射 ： hasattr getattr 用字符串的形式来获取变量
        # 内置方法 ：__new__类的构造方法，在init之前执行