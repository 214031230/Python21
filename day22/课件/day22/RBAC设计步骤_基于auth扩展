权限系统实现
1. 创建并注册APP
	1. 创建App: python mange.py startapp rbac
	2. 注册APP：setting.py  
		INSTALLED_APPS = [
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
		'web.apps.WebConfig',
		'rbac.apps.RbacConfig'
		]
2. 设计表结构
	from django.db import models
	from django.contrib.auth.models import AbstractUser

	# Create your models here.
	"""
	RBAC涉及到5张表
		1. 用户表  (用户和角色是多对多的关系)
			用户表基于Django auth_user 进行扩展,扩展方法如下：
			1. models.py:
			   from django.contrib.auth.models import AbstractUser
			   class UserInfo(AbstractUser):
			   
			2. settings.py:
			   AUTH_USER_MODEL = "rbac.UserInfo"
		2. 角色表  (角色和权限是多对多的关系)
		3. 权限表  
		4. 用户-角色表
		5. 角色-权限表
	"""


	class UserInfo(AbstractUser):
		"""
		用户表使用django Admin的user表
		扩展django Admin的用户表
		roles 字段： 用户和角色多对多字段，这个字段可以写在用户表或者角色表中，主要看场景是根据角色找用户还是根据用户找角色，
					在这个场景中，我们根据用户找角色多，所以我们把ManyToManyField字段写在用户表中
			null = True ： 允许为空
			blank = True： 在django Admin后台允许为空
		"""
		phone = models.CharField(max_length=11, verbose_name="手机号")
		avatar = models.FileField(upload_to="avatar", verbose_name="头像")
		roles = models.ManyToManyField(to="Role", null=True, blank=True, verbose_name="用户角色")

		def __str__(self):
			"""
			在Django Admin中显示数据名称
			:return:
			"""
			return self.username

		class Meta:
			"""
			在Django Admin中显示中文表名
			"""
			verbose_name = "用户表"
			verbose_name_plural = verbose_name


	class Role(models.Model):
		"""
		角色权限表
		Permissions: 角色和权限URL是多对多的关系，在这个场景中我们使用角色查找URL，所以我们把ManyToManyField写在角色表中
		"""
		name = models.CharField(max_length=36, verbose_name="角色名称")
		Permissions = models.ManyToManyField(to="Permission", verbose_name="权限URL")

		def __str__(self):
			return self.name

		class Meta:
			verbose_name = "角色表"
			verbose_name_plural = verbose_name


	class Permission(models.Model):
		"""
		权限表
		保存需要控制的URL
		"""
		name = models.CharField(max_length=16, verbose_name="UR名称")
		url = models.CharField(max_length=255, verbose_name="URL路径")
		is_menus = models.BooleanField(default=False, verbose_name="是否可作为菜单？")
		icon = models.CharField(max_length=255, verbose_name="菜单图标", null=True, blank=True)

		def __str__(self):
			return self.url

		class Meta:
			verbose_name = "权限表"
			verbose_name_plural = verbose_name
3. 创建表结构
	python manage.py makemigrations
	python manage.py migrate
4. 使用Django Admin创建初始数据
	1. python manage.py createsuperuser
	2. 配置Django 后台中文（settings.py）
		LANGUAGE_CODE = 'zh-hans'
	3. 注册表到Admin中（admin.py）
		from django.contrib import admin
		from rbac import models

		# Register your models here.

		admin.site.register(models.UserInfo)
		admin.site.register(models.Role)


		# 自定义一个权限的管理类
		class PermissionAdmin(admin.ModelAdmin):
			# 告诉Django admin在页面上展示我这张表的哪些字段
			list_display = ["name", "url", "is_menus", "icon"]
			# 在列表页面支持直接修改的字段
			list_editable = ["url", "is_menus", "icon"]


		admin.site.register(models.Permission, PermissionAdmin)
	4. 使用Auth模块需要配置的项（settings.py）
		# 使用auth的登录装饰器时候跳转的路径
		LOGIN_URL = "/login/"
	5. 配置用户上传文件的路径
		# 配置用户上传文件目录
		MEDIA_ROOT = os.path.join(BASE_DIR, "media")

		# 告诉Django项目用户通过什么前缀来访问刚才定义的那个目录
		MEDIA_URL = "/media/"
	
		
					
			
