01 int
    1,2,3 .... 用于计算，运算。
02 str
    ‘老男孩’，‘alex'.... 少量的数据的存储。
03 bool：True,False.
04 list:储存大量的数据
    [True,1,'alex',{'name':'oldboy'},[1,2,3],(2,3,4),{'wusir'}]
    一，索引，切片。



05 tuple 只读列表
(True,1,'alex',{'name':'oldboy'},[1,2,3],(2,3,4),{'wusir'})
06 dict：大量的数据，关联型数据。查询速度非常快，符合二分查找。
{'name':'oldboy','age':45,'name_list':['张三'....]}
07 set：关系型数据的交集，并集，差集，子集.... 列表的去重。

08 bytes


08 编码。
编码:
    ascii：字母，数字，特殊字符。
    万国码：unicode ：
        A: 0000 0010 0000 0010 两个字节，表示一个字符。
       中: 0000 0010 0000 0010 两个字节，表示一个字符。
    升级：
        A: 0000 0010 0000 0010 0000 0010 0000 0010 四个字节，表示一个字符。
       中: 0000 0010 0000 0010 0000 0010 0000 0010 四个字节，表示一个字符。
       占空间，浪费资源。
   utf-8：最少用一个字节，表示一个字符.
        A: 0000 0010
     欧洲：0000 00100000 0010
     中文：0000 00100000 00100000 0010

    gbk国标。
        A: 0000 0010
        中： 0000 0010 0000 0010
        python3x:
            1,不同编码之间的二进制是不能互相识别的。
            2,python3x str内部编码方式（内存）为unicode
                但是，对于文件的存储，和传输不能用unicode
            bytes类型：内部编码方式（内存）为非unicode
           #对于英文
               str:
                s = 'laonanhai' 表现形式
                内部编码方式 unicode

                bytes:
                s1 = b'laonanhai'  表现形式
                内部编码方式 非unicode （utf-8,gbk,gb2312....）
            #对于中文：
                str：
                    s = '中国'
                    print(s,type(s))
                bytes：
                    s1 = b'\xe4\xb8\xad\xe5\x9b\xbd'
                    print(s1,type(s1))

09 数据类型的补充。



10，文件操作。