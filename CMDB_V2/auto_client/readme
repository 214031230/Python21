auto_client代码流程：
    - 编写资产采集脚本
    - agent模块(auto_client运行在每台需要采集的服务器上面)
        1. 获取本机资产信息
        2. 使用requests将资产信息汇报到api，入库持久化
    - ssh/salt模块(auto_client运行在中控机上或者saltstack管理机上)
        1. 获取未采集的资产列表
        2. 循环列表，为每个服务器资产创建一个线程去采集（线程池）
        3. 使用requests将资产信息分别汇报到api，入库持久化


auto_client知识点：
    1. 异常处理记录日志(使用e无法记录代码的行数和详细信息)
        - 使用traceback模块
            - 示例：
                    import traceback
                    try:
                        pass
                    except Exception as e:
                        msg = traceback.format_exc()
                        print(msg)

    2. 唯一标识问题（自动发现会遇到的问题）
        - 如果只是物理机的话，使用sn号就可以解决
        - 如果是物理机+虚拟机：
            - 使用sn结合openstack的API来记录
            - 主机名作为唯一标识：；
                - 问题：怎么保证主机名唯一性，两台机器主机名一致怎么处理？
                - 解决方法：在client下生产一个文件(hostname)记录主机名
                    - 如果是新增机器：
                        则hostname为空，运行client以后保存主机名到hostname汇报到api。
                        如果主机名已经存在：
                            则不写入到数据库中，并记录错误日志
                        如果不存在：
                            则正常汇报
                    - 如果是已存在机器：
                        则hostname中保存有当前主机名
                        如果主机名发生修改：
                            则携带旧的主机名和新的主机名进行汇报：
                            如果新的主机名已经存在：
                                则使用旧的主机名进行汇报，并记录错误信息
                            如果新的主机名不存在：
                                则替换旧的主机名为新的主机名，并返回成功信息给客户端，客户端修改hostname为新的主机名

    3. 开放封闭原则，可扩展
       - 封闭：对源码封闭
       - 开放：对配置文件开发

    4. request.body 和 request.POST区别：
        - POST: 获取请求体中的所有数据
        - body: 获取请求体中的原生数据
        如果http发送的请求体格式是：
                "hostname=123&cpu=xxxx"
        则request.POST才能进行解析

        一般情况如果在POST中获取不到值，则在body中获取值。

    5. csrf token 取消个别函数的csrf token验证，可以使用特殊的装饰器
        from django.views.decorators.csrf import csrf_exempt
        @csrf_exempt
        def asset(request):
            pass

    6. 线程池

    7. 在python中实现抽象类和抽象方法
        # 定义抽象类和抽象方法如果在派生类中没有实现handler方法，在调用handler就会抛出异常 raise NotImplementedError
        class Base:
            def handler(self):
                raise NotImplementedError("handler must be implemented")

        # 继承抽象类
        class Foo:
            def handler(self):
                pass





