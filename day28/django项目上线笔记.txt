今日内容：

博客地址：https://www.cnblogs.com/pyyu/p/9481344.html

django项目部署
所需环境：
vmware  云服务器

centos7 
	安装一个远程传输软件 lrzsz  
	yum install lrzsz -y  
		sz  #send 传输文件
		rz   #接受文件




xshell

所需软件：
python3 
rpm   yum    编译安装

编译安装python3
解决依赖
yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y

1.下载python3源码包
wget https://www.python.org/ftp/python/3.4.7/Python-3.4.7.tar.xz
xz -d Python-3.4.7.tar.xz
tar -xf Python-3.4.7.tar

2.进入python3源码包路径，开始编译安装

./configure --prefix=/opt/python3/   #生成一个makefile文件
make 
make install  
结束后，完成编译安装

3.配置python3可执行命令，快捷方式
#linux添加python3的环境变量

#第一种方式
ln -s /opt/python3/bin/python3   /usr/bin/python3  
#第二种方式，写入到/etc/profile中，这一步非常重要  base prefix 基本路径

export PATH=/opt/python34/bin/:$PATH

source /etc/profile  使得配置文件生效

4.测试直接输入 python3，能否进入python 


virtualenv    
	问题比较多，不容易管理
	
	
1.下载virtualenv
pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple virtualenv
2.通过命令创建虚拟环境venv
#确保环境干净隔离，与宿主及解释器隔离开 --no-site-packages

virtualenv --no-site-packages --python=python3    venv 

3.检查环境变量，确认已经进入venv虚拟环境中
source venv/bin/activate
echo $PATH 

4.测试安装两个不同版本的django环境
	1.在系统解释器下
		pip3 install django==1.11.15
	2.在虚拟环境venv中
		pip3 install django 
5.可以测试在两个解释器中，运行不同的任务

6.退出虚拟环境
deactivate命令

保证开发/测试环境一致性
1.通过命令导入项目依赖
pip3 freeze > requirements.txt   
2.传输此requirements.txt 文件到服务器环境，通过命令直接安装
pip3 install -r requirements.txt


virtualenvwrapper
(和virtualenv二选一)

	为了解决虚拟环境难以管理的问题，并且容易使用
	
1.安装  
pip3 install  virtualenvwrapper

2.配置环境变量，使得每次登陆就启动virtualenvwrapper
写入到 ~/.bashrc 文件中，
vim ~/.bashrc 

export WORKON_HOME=~/Envs   #设置virtualenv的统一管理目录
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'   #添加virtualenvwrapper的参数，生成干净隔绝的环境
export VIRTUALENVWRAPPER_PYTHON=/opt/python34/bin/python3     #指定宿主机python3解释器绝对路径
source /opt/python34/bin/virtualenvwrapper.sh #执行virtualenvwrapper安装脚本

3.使得脚本生效，重新登录一次
logout  在重新登录的时候，加载virtualenvwrapper脚本


4.使用virtualenvwrapper常用命令
	创建一个虚拟环境：
	$ mkvirtualenv my_django115
	这会在 ~/Envs 中创建 my_django115 文件夹。

	在虚拟环境上工作：激活虚拟环境my_django115
	$ workon my_django115

	再创建一个新的虚拟环境
	$ mkproject my_django2

	virtualenvwrapper 提供环境名字的tab补全功能。
	当有很多环境， 并且很难记住它们的名字时，这就显得很有用。
	workon还可以任意停止你当前的环境，可以在多个虚拟环境中来回切换
	workon django1.15

	workon django2.0

	也可以手动停止虚拟环境
	deactivate

	删除虚拟环境，需要先退出虚拟环境
	rmvirtualenv my_django115




uwsgi 
	django默认启动 python  manager.py  runserver  它调用wsgiref单机web服务器模块，性能很差
	在线上启动django项目，选择的是 uWSGI + django  ,使用多进程高性能的web服务器运行，支持并发性更好
	
重点标记：
	django创建时，会产生wsgi.py文件
	mysite/mysite/wsgi.py 
		#wsgi.py产生的application应用
		application = get_wsgi_application()
	可能出现的坑：
		1. no  application  xxxxxx   这个问题就是说，你指定的wsgi.py文件不正确
	
	1.安装uwsgi
	pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple    uwsgi
	2.通过uwsgi启动一个python web文件
		test.py 
		
		def application(env, start_response):
			start_response('200 OK', [('Content-Type','text/html')])
			return [b"Hello World"] # python3
		通过命令启动
		uwsgi --http :9000 --wsgi-file test.py  
		启动后可以浏览器 ip:9000  访问django程序
	3.通过uwsgi启动一个python django项目 
		1.准备django项目，编写urls、views.py ，修改settings.py 
		2.通过命令启动 django ,
		要点就是，必须先进入django的第一层目录，然后通过相对路径找到wsgi.py 
		cd mysite 
		uwsgi --http :9999 --module  mysite.wsgi  
		
	
	

	
	


django

准备一个django项目文件夹，配置好外网访问
修改settings.py 
	allow_host=['*']
修改数据库驱动

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

pip3 install pymysql 

__init__.py 文件中添加数据库驱动

import pymysql 
	pymysql.install()



















nginx 
	1.因为nginx处理并发的良好性、
	2.nginx对静态文件处理的良好性
		备注：因为uwsgi启动django项目，不会读取一个静态文件的配置参数
	3.nginx负载均衡的一个作用

	
安装配置nginx


	1.yum install nginx -y  
      yum install epel-*  -y 

	#需要提前备好epel源
	#检测nginx是否安装成功 
		rpm -qi nginx
	
	
	2.启动nginx web服务器
	/usr/sbin/nginx  启动nginx web服务

	3.配置nginx.conf配置反向代理uwsgi，以及静态资源处理
	如果找不到nginx.conf ，通过命令查找
		find / -name nginx.conf
	
	
	        location / {
				 include /etc/nginx/uwsgi_params;
				 uwsgi_pass 0.0.0.0:8000;
        }
        #静态资源入口
			location /static {
				  alias /opt/static/;
				}
			}
			
	4.修改完，重启nginx
	/usr/bin/nginx -s  reload 
	

配置项目的静态文件资源，通过nginx加载
	1.修改django的setings.py文件

	mysite/settings.py 
	加入以下信息
		#指定静态文件存放路径
STATIC_ROOT='/opt/static'
#指定静态资源，请求入口
STATIC_URL = '/static/'
STATICFILES_DIRS=[
	os.path.join(BASE_DIR,"static"),
]

	2.通过命令收集静态文件资源
		python3 manage.py collectstatic 收集所有你使用的静态文件保存到STATIC_ROOT！
		
	3.此时static_root下有了所有项目的静态资源




supervisor
	1.不再通过命令行的方式，启动项目，通过ps -ef  kill 
	2.进行进程管理（python ,mysql,redis,nginx）
	3.通过supervisr统一化管理linux进程
	4.检测到你服务挂了，自动重启

安装配置supervisor
1.通过easy_install安装
	#注意此时已经退出虚拟环境了！！！！！
	yum install python-setuptools
	easy_install supervisor
	
	
2.通过命令生成supervisor的配支文件
	echo_supervisord_conf > /etc/supervisord.conf
	
3.在配置文件中，添加任务，管理django项目
	vim /etc/supervisord.conf #写入信息
	
	[program:s21_django]
	#管理uwsgi的命令， 轻使用绝对路径
	command=/root/Envs/nginx_uwsgi/bin/uwsgi  --ini /home/mysite/uwsgi.ini
	#检测项目是否挂掉，自动重启
	autorestart=true


4.启动supervisord
supervisord -c supervisord.conf 


5.管理supervisor的命令
一、添加好配置文件后

二、更新新的配置到supervisord    

supervisorctl update
三、重新启动配置中的所有程序

supervisorctl reload
四、启动某个进程(program_name=你配置中写的程序名称)

supervisorctl start program_name
五、查看正在守候的进程

supervisorctl
六、停止某一进程 (program_name=你配置中写的程序名称)

pervisorctl stop program_name
七、重启某一进程 (program_name=你配置中写的程序名称)

supervisorctl restart program_name
八、停止全部进程

supervisorctl stop all
注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。
	
	
环境初始化:
关闭防火墙
systemctl stop firewalld
iptables -F
setenforce 0   #系统自带防火墙也给关了


项目发布博客地址：
https://www.cnblogs.com/pyyu/p/9481344.html


